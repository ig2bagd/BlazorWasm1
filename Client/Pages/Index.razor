@page "/"
@inject IJSRuntime js
@inject NavigationManager navMgr

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title=@Title />

<button class="btn btn-primary" @onclick="UpdateTitle">Answer</button>
<br />
<TelerikButton OnClick="@SayHelloHandler" ThemeColor="primary">Say Hello</TelerikButton>
<TelerikButton OnClick="@(async () => { await js.InvokeVoidAsync("addState", "multiselect"); navMgr.NavigateTo("./multiselect"); })" ThemeColor="primary">Go to MultiSelect</TelerikButton>
<TelerikButton OnClick="@(async () => await js.InvokeVoidAsync("saveMessage", "Hello, world!"))" ThemeColor="primary">JS Alert</TelerikButton>

<br />

@helloString

<hr />
<div class="bg-dark text-white m-2 p-1">
    <pre>Counter: @counter </pre>
</div>

<MyComponent OnAccountEntered=this.AccountChanged />

<hr />
<Dialog Title="Are you sure?" Buttons="@Buttons">
    <Body>
        Do you really want to delete this user?
    </Body>
</Dialog>

<hr />
<p>Slider Value: <b>@SliderValue</b></p>

<input type="range" step="1"
       @bind-value="SliderValue"
       @bind-value:event="oninput" />

<hr />
<!-- DynamicComponent -->
<div>
    <button class="btn btn-primary mb-3" @onclick="this.OnClick">Switch</button>
</div>

<DynamicComponent Type="_activeComponent" Parameters="_parameters" />


@code {
    MarkupString helloString;
    int SliderValue = 0;
    private int counter;

    private Type _activeComponent = typeof(Counter);
    private Dictionary<string, object> _parameters = new();

    private Task OnClick()
    {
        if (_activeComponent == typeof(Counter))
        {
            _activeComponent = typeof(FetchData);
            _parameters = new();
        }
        else
        {
            _activeComponent = typeof(Counter);
            _parameters = new();
        }

        return Task.CompletedTask;
    }

    public string Title { get; set; } = "How is Blazor working for you?";

    private void UpdateTitle()
    {
        Title = $"Pretty good, thanks! ({counter++})";
    }

    void SayHelloHandler()
    {
        string msg = string.Format("Hello from <strong>Telerik Blazor</strong> at {0}.<br /> Now you can use C# to write front-end!", DateTime.Now);
        helloString = new MarkupString(msg);
    }

    

    private async Task AccountChanged(int value)
    {
        counter = value;
        // pretend we're an async method getting data from some async source
        await Task.Yield();
        // call StateHasChanged if the process mutates the state of this component
        StateHasChanged();
    }

    public IEnumerable<DialogButton> Buttons { get; set; } = new List<DialogButton>{
        new DialogButton("Delete", () =>
        {
            Console.WriteLine("Delete");
        }),
        new DialogButton("Cancel", () =>
        {
            Console.WriteLine("Cancel");
        })
    };
}
