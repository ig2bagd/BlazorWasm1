@page "/"
@inject IJSRuntime js
@inject NavigationManager navMgr

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<TelerikButton OnClick="@SayHelloHandler" ThemeColor="primary">Say Hello</TelerikButton>
<TelerikButton OnClick="@(async () => { await js.InvokeVoidAsync("addState", "multiselect"); navMgr.NavigateTo("./multiselect"); })" ThemeColor="primary">Go to MultiSelect</TelerikButton>
<TelerikButton OnClick="@(async () => await js.InvokeVoidAsync("saveMessage", "Hello, world!"))" ThemeColor="primary">JS Alert</TelerikButton>

<br />

@helloString

<hr />
<div class="bg-dark text-white m-2 p-1">
    <pre>Counter: @counter </pre>
</div>

<MyComponent OnAccountEntered=this.AccountChanged />

<hr />
<Dialog Title="Are you sure?" Buttons="@Buttons">
    <Body>
        Do you really want to delete this user?
    </Body>
</Dialog>

@code {
   MarkupString helloString;

   void SayHelloHandler()
   {
       string msg = string.Format("Hello from <strong>Telerik Blazor</strong> at {0}.<br /> Now you can use C# to write front-end!", DateTime.Now);
       helloString = new MarkupString(msg);
   }

    private int counter;

    private async Task AccountChanged(int value)
    {
        counter = value;
        // pretend we're an async method getting data from some async source
        await Task.Yield();
        // call StateHasChanged if the process mutates the state of this component
        StateHasChanged();
    }

    public IEnumerable<DialogButton> Buttons { get; set; } = new List<DialogButton>{
        new DialogButton("Delete", () =>
        {
            Console.WriteLine("Delete");
        }),
        new DialogButton("Cancel", () =>
        {
            Console.WriteLine("Cancel");
        })
    };
}
